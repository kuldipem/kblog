<?php

namespace Proxies\__CG__\kblog\CoreBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Category extends \kblog\CoreBundle\Entity\Category implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array();



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return array('__isInitialized__', 'id', 'title', 'is_parent', 'created_at', 'updated_at', 'blogs', 'video_tutorials', 'page');
        }

        return array('__isInitialized__', 'id', 'title', 'is_parent', 'created_at', 'updated_at', 'blogs', 'video_tutorials', 'page');
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Category $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', array());
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', array());
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function setCreatedDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedDateTime', array());

        return parent::setCreatedDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedDateTime()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedDateTime', array());

        return parent::setUpdatedDateTime();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', array());

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', array($title));

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', array());

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setIsParent($isParent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIsParent', array($isParent));

        return parent::setIsParent($isParent);
    }

    /**
     * {@inheritDoc}
     */
    public function getIsParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIsParent', array());

        return parent::getIsParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', array($createdAt));

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', array());

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', array($updatedAt));

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', array());

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function addBlog(\kblog\CoreBundle\Entity\Blog $blogs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addBlog', array($blogs));

        return parent::addBlog($blogs);
    }

    /**
     * {@inheritDoc}
     */
    public function removeBlog(\kblog\CoreBundle\Entity\Blog $blogs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeBlog', array($blogs));

        return parent::removeBlog($blogs);
    }

    /**
     * {@inheritDoc}
     */
    public function getBlogs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBlogs', array());

        return parent::getBlogs();
    }

    /**
     * {@inheritDoc}
     */
    public function addVideoTutorial(\kblog\CoreBundle\Entity\VideoTutorial $videoTutorials)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addVideoTutorial', array($videoTutorials));

        return parent::addVideoTutorial($videoTutorials);
    }

    /**
     * {@inheritDoc}
     */
    public function removeVideoTutorial(\kblog\CoreBundle\Entity\VideoTutorial $videoTutorials)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeVideoTutorial', array($videoTutorials));

        return parent::removeVideoTutorial($videoTutorials);
    }

    /**
     * {@inheritDoc}
     */
    public function getVideoTutorials()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVideoTutorials', array());

        return parent::getVideoTutorials();
    }

    /**
     * {@inheritDoc}
     */
    public function setPage(\kblog\CoreBundle\Entity\Page $page)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPage', array($page));

        return parent::setPage($page);
    }

    /**
     * {@inheritDoc}
     */
    public function getPage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPage', array());

        return parent::getPage();
    }

}
